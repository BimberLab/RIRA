[{"path":"https://bimberlab.github.io/RIRA/articles/GetRira.html","id":"download-rira-data","dir":"Articles","previous_headings":"","what":"Download RIRA Data:","title":"Download RIRA","text":"example downloads processed Seurat object GEO. large file (~10GB); however, contains pre-computed dimensionality reductions metadata. also possible download count matrix GEO, GEOquery R package. addition entire Seurat object, just metadata (~67mb) available download table. table merged raw counts interested specific information. Due large size, practice might useful download ‘T_NK’, ‘Bcell’, ‘Myeloid’ subsets.","code":"seuratObj <- DownloadFromGEO(subset = 'All', outfile = 'RIRA_All.rds')  # or: seuratObj <- DownloadFromGEO(subset = 'T_NK', outfile = 'RIRA_All.rds')"},{"path":"https://bimberlab.github.io/RIRA/articles/GetRira.html","id":"basic-exploration","dir":"Articles","previous_headings":"","what":"Basic Exploration","title":"Download RIRA","text":"seurat object, RIRA data compatible wide range scRNA-seq analysis visualization tools. examples, take advantage metadata cell classifications included dataset: coarse cell type classification (see vignette('CellType') information calculated used data):","code":"DimPlot(seuratObj, group.by = 'RIRA_Immune_v2.cellclass')"},{"path":"https://bimberlab.github.io/RIRA/articles/TCellDifferentiation.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"T Cell Type/State Scoring","text":"First download data Seurat object (use input data): cell labels used RIRA manuscript, also provided seurat object:","code":"seuratObj <- DownloadFromGEO(subset = 'T_NK', outfile = 'RIRA_T_NK.rds') Seurat::DimPlot(seuratObj, group.by = 'TCellSubtype')"},{"path":"https://bimberlab.github.io/RIRA/articles/TCellDifferentiation.html","id":"modeling-t-cell-naive-effector-differentiation","dir":"Articles","previous_headings":"","what":"Modeling T Cell Naive-Effector Differentiation","title":"T Cell Type/State Scoring","text":"Using sorted T cell data, empirically defined trajectory (gene component) models T cell naive--memory differentiation, can used categorize cells according property. can imputed seurat object, following example . practical usage score subset/gate dataset","code":"seuratObj <- ScoreUsingSavedComponent(seuratObj, componentOrName = 'Tcell_EffectorDifferentiation', fieldName = 'EDS')  UMAP_ED <- FeaturePlot(seuratObj, features = 'Tcell_EffectorDifferentiation', min.cutoff = 'q02', max.cutoff = 'q98') +         ggtitle('EDS Is a Trajectory Modeling\\nNaive-Effector Differentiation') +         scale_color_gradientn(                 colors = c(\"navy\", \"dodgerblue\", \"yellow\", \"gold\", \"orange\", \"red\", \"maroon\")         ) +         NoLegend()  Pheno <- VlnPlot(seuratObj, features = 'Tcell_EffectorDifferentiation', group.by = 'TCellSubtype', pt.size = 0) + NoLegend() + ggtitle('EDS As Tool\\nFor Gating') +         geom_hline(yintercept = 6, linetype = 'dashed') +         geom_hline(yintercept = 2, linetype = 'dashed') +         labs(x = '')  P <- UMAP_ED + Pheno + patchwork::plot_layout(ncol = 2) P"},{"path":"https://bimberlab.github.io/RIRA/articles/TCellDifferentiation.html","id":"memory-and-cytotoxic-differentiation","dir":"Articles","previous_headings":"","what":"Memory and Cytotoxic Differentiation","title":"T Cell Type/State Scoring","text":"might predicted, RNA features robust distinguishing lineage/state always identical canonical protein markers. RIRA manuscript, demonstrated expression S100A proteins correlated naive-memory differentiation, pattern granzyme expression also correlated differentiation, T-central memory cells skewed toward granzymes K/M, T effector memory skewed toward granzymes B/H. code demonstrate","code":"seuratObj <- UCell::AddModuleScore_UCell(seuratObj, features = list(         TCellMemory = GetGeneSet('TCellMemoryS100'),         Cytotoxicity.GzmABH = GetGeneSet('Cytotoxicity.GzmABH'),         Cytotoxicity.GzmKM = GetGeneSet('Cytotoxicity.GzmKM')   ))  dat <- seuratObj@meta.data %>%         group_by(TCellSubtype) %>%         summarize(                 Cytotoxicity.GzmKM_UCell = mean(Cytotoxicity.GzmKM_UCell),                 Cytotoxicity.GzmABH_UCell = mean(Cytotoxicity.GzmABH_UCell)         )  GZM_Plot <- ggplot(dat, aes(x = Cytotoxicity.GzmABH_UCell, y = Cytotoxicity.GzmKM_UCell, color = TCellSubtype)) +         geom_point(size = 5) +         ggrepel::geom_label_repel(aes(label = TCellSubtype), color = 'black', size = 3, max.overlaps = 3) +         egg::theme_article(base_size = 12) +         theme(                 legend.position = 'none',                 plot.title = element_text(hjust = 0.5),                 axis.text.x = element_text(angle = 45, hjust = 1)         ) +         labs(                 title = 'Granzyme Expression\\nSeparates Populations',                 x = 'Avg. Gzm A/B/H Score',                 y = 'Avg. Gzm K/M Score'         )"},{"path":"https://bimberlab.github.io/RIRA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bimber Lab. Maintainer.","code":""},{"path":"https://bimberlab.github.io/RIRA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lab B (2025). RIRA: package Rhesus Immune Reference Atlas (RIRA): multi-tissue single-cell landscape immune cells. R package version 1.0.0, https://bimberlab.github.io/RIRA/.","code":"@Manual{,   title = {RIRA: A package for the Rhesus Immune Reference Atlas (RIRA): A multi-tissue single-cell landscape of immune cells},   author = {Bimber Lab},   year = {2025},   note = {R package version 1.0.0},   url = {https://bimberlab.github.io/RIRA/}, }"},{"path":[]},{"path":"https://bimberlab.github.io/RIRA/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"A package for the Rhesus Immune Reference Atlas (RIRA): A multi-tissue single-cell landscape of immune cells","text":"Overview Installation Download RIRA Data","code":""},{"path":"https://bimberlab.github.io/RIRA/index.html","id":"overview","dir":"","previous_headings":"Table of Contents","what":"Overview","title":"A package for the Rhesus Immune Reference Atlas (RIRA): A multi-tissue single-cell landscape of immune cells","text":"RIRA multi-tissue single-cell RNA-seq atlas Rhesus macaque cells, including data 7 tissues 47 animals. provides highly annotated reference data, number pipelines assign cell type data using RIRA’s built-models. Finally, includes pipelines replicate process used generate RIRA’s reference labels, might useful generating similar reference another species. raw expression data available, including seurat object, NIH GEO database accession GSE277821. Please see documentation detail usage examples","code":""},{"path":"https://bimberlab.github.io/RIRA/index.html","id":"installation","dir":"","previous_headings":"Table of Contents","what":"Installation","title":"A package for the Rhesus Immune Reference Atlas (RIRA): A multi-tissue single-cell landscape of immune cells","text":"Pre-packaged Docker images needed dependencies installed can found GitHub Packages page:","code":"# Make sure to update your Rprofile to include Bioconductor repos, such as adding this line to ~/.Rprofile: local({options(repos = BiocManager::repositories())})  #Latest version: devtools::install_github(repo = 'bimberlab/RIRA', ref = 'master', dependencies = TRUE, upgrade = 'always') docker pull ghcr.io/bimberlab/rira:latest"},{"path":"https://bimberlab.github.io/RIRA/reference/AssignCellType.html","id":null,"dir":"Reference","previous_headings":"","what":"Assigns celltype label based on probabilities in the metadata — AssignCellType","title":"Assigns celltype label based on probabilities in the metadata — AssignCellType","text":"Assigns celltype label based probabilities metadata","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/AssignCellType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assigns celltype label based on probabilities in the metadata — AssignCellType","text":"","code":"AssignCellType(   seuratObj,   probabilityColumns,   fieldName = \"RIRA_Consensus\",   minimum_probability = 0.5,   minimum_delta = 0.25 )"},{"path":"https://bimberlab.github.io/RIRA/reference/AssignCellType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assigns celltype label based on probabilities in the metadata — AssignCellType","text":"seuratObj Seurat Object updated probabilityColumns set columns containing probabilities classifier include fieldName name metadata column store result minimum_probability minimum probability confident cell type assignment minimum_delta minimum difference probabilities necessary call one celltype another.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/CalculateUCellScores.html","id":null,"dir":"Reference","previous_headings":"","what":"CalculateUCellScores — CalculateUCellScores","title":"CalculateUCellScores — CalculateUCellScores","text":"calculate handful standardized UCell scores seurat object","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/CalculateUCellScores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CalculateUCellScores — CalculateUCellScores","text":"","code":"CalculateUCellScores(   seuratObj,   forceRecalculate = FALSE,   seed = GetSeed(),   ncores = 1,   assayName = \"RNA\",   storeRanks = TRUE,   plotCor = TRUE )"},{"path":"https://bimberlab.github.io/RIRA/reference/CalculateUCellScores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CalculateUCellScores — CalculateUCellScores","text":"seuratObj seurat object forceRecalculate true, UCell always re-run, even field already present. seed non-null, set.seed() called prior running UCell ncores number core use UCell::AddModuleScore_UCell assayName assay calculate UCell scores. storeRanks Passed directly UCell::AddModuleScore_UCell. Increases object size makes future calculations quicker. plotCor true, plot correlations UCell score component gene shown","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/Classify_ImmuneCells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify Bulk Immune cells — Classify_ImmuneCells","title":"Classify Bulk Immune cells — Classify_ImmuneCells","text":"Runs celltypist using RIRA bulk immune model score cells using CellTypist optimized parameters.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/Classify_ImmuneCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify Bulk Immune cells — Classify_ImmuneCells","text":"","code":"Classify_ImmuneCells(   seuratObj,   assayName = Seurat::DefaultAssay(seuratObj),   columnPrefix = \"RIRA_Immune_v2.\",   maxAllowableClasses = 6,   minFractionToInclude = 0.01,   minCellsToRun = 200,   maxBatchSize = 6e+05,   retainProbabilityMatrix = FALSE,   filterDisallowedClasses = TRUE )"},{"path":"https://bimberlab.github.io/RIRA/reference/Classify_ImmuneCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify Bulk Immune cells — Classify_ImmuneCells","text":"seuratObj seurat object assayName name assay use. Others dropped columnPrefix prefix added beginning resulting columns, added seurat@meta.data maxAllowableClasses Celltypist can assign cell many classes, creating extremely long labels. cell number labels set NA minFractionToInclude non-null, labels fewer fraction cells set NA. minCellsToRun input seurat object fewer many cells, NAs added expected columns celltypist run. maxBatchSize many cells object, split batches size run serial. retainProbabilityMatrix true, celltypist probability_matrix per-class probabilities stored meta.data filterDisallowedClasses true, run FilterDisallowedClasses() output.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/Classify_Myeloid.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify T/NK — Classify_Myeloid","title":"Classify T/NK — Classify_Myeloid","text":"Runs celltypist using RIRA Myeloid model score cells using CellTypist optimized parameters.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/Classify_Myeloid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify T/NK — Classify_Myeloid","text":"","code":"Classify_Myeloid(   seuratObj,   assayName = Seurat::DefaultAssay(seuratObj),   columnPrefix = \"RIRA_Myeloid_v3.\",   maxAllowableClasses = 6,   minFractionToInclude = 0.01,   minCellsToRun = 200,   maxBatchSize = 6e+05,   retainProbabilityMatrix = FALSE )"},{"path":"https://bimberlab.github.io/RIRA/reference/Classify_Myeloid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify T/NK — Classify_Myeloid","text":"seuratObj seurat object assayName name assay use. Others dropped columnPrefix prefix added beginning resulting columns, added seurat@meta.data maxAllowableClasses Celltypist can assign cell many classes, creating extremely long labels. cell number labels set NA minFractionToInclude non-null, labels fewer fraction cells set NA. minCellsToRun input seurat object fewer many cells, NAs added expected columns celltypist run. maxBatchSize many cells object, split batches size run serial. retainProbabilityMatrix true, celltypist probability_matrix per-class probabilities stored meta.data","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/Classify_TNK.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify T/NK — Classify_TNK","title":"Classify T/NK — Classify_TNK","text":"Runs celltypist using RIRA T/NK 4-class model score cells using CellTypist optimized parameters.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/Classify_TNK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify T/NK — Classify_TNK","text":"","code":"Classify_TNK(   seuratObj,   assayName = Seurat::DefaultAssay(seuratObj),   columnPrefix = \"RIRA_TNK_v2.\",   maxAllowableClasses = 6,   minFractionToInclude = 0.01,   minCellsToRun = 200,   maxBatchSize = 6e+05,   retainProbabilityMatrix = FALSE )"},{"path":"https://bimberlab.github.io/RIRA/reference/Classify_TNK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify T/NK — Classify_TNK","text":"seuratObj seurat object assayName name assay use. Others dropped columnPrefix prefix added beginning resulting columns, added seurat@meta.data maxAllowableClasses Celltypist can assign cell many classes, creating extremely long labels. cell number labels set NA minFractionToInclude non-null, labels fewer fraction cells set NA. minCellsToRun input seurat object fewer many cells, NAs added expected columns celltypist run. maxBatchSize many cells object, split batches size run serial. retainProbabilityMatrix true, celltypist probability_matrix per-class probabilities stored meta.data","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/DownloadFromGEO.html","id":null,"dir":"Reference","previous_headings":"","what":"Download RIRA data from GEO — DownloadFromGEO","title":"Download RIRA data from GEO — DownloadFromGEO","text":"download RIRA raw data GEO, Seurat object","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/DownloadFromGEO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download RIRA data from GEO — DownloadFromGEO","text":"","code":"DownloadFromGEO(outfile = NULL, subset = c(\"All\", \"T_NK\", \"Myeloid\", \"Bcell\"))"},{"path":"https://bimberlab.github.io/RIRA/reference/DownloadFromGEO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download RIRA data from GEO — DownloadFromGEO","text":"outfile location initially download raw data. omitted NULL, download RDS temporary file folder delete completion. However, download large may useful download location plan keep. subset cell subset download, either , T_NK, Myeloid, BCell ","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/ExpandGeneList.html","id":null,"dir":"Reference","previous_headings":"","what":"ExpandGeneList — ExpandGeneList","title":"ExpandGeneList — ExpandGeneList","text":"Takes input gene list identifies entries matching registered gene sets. expanded full gene list.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/ExpandGeneList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExpandGeneList — ExpandGeneList","text":"","code":"ExpandGeneList(genes, verbose = TRUE)"},{"path":"https://bimberlab.github.io/RIRA/reference/ExpandGeneList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ExpandGeneList — ExpandGeneList","text":"genes vector genes gene set names verbose Whether log information matches","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/ExtractGeneWeights.html","id":null,"dir":"Reference","previous_headings":"","what":"ExtractGeneWeights — ExtractGeneWeights","title":"ExtractGeneWeights — ExtractGeneWeights","text":"Extracts loadings given component seurat object returns data.frame suitable ScoreUsingSavedComponent","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/ExtractGeneWeights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExtractGeneWeights — ExtractGeneWeights","text":"","code":"ExtractGeneWeights(   seuratObj,   componentNum,   topNGenes = 100,   bottomNGenes = 100,   reduction = \"pca\" )"},{"path":"https://bimberlab.github.io/RIRA/reference/ExtractGeneWeights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ExtractGeneWeights — ExtractGeneWeights","text":"seuratObj seurat object componentNum component number use topNGenes number top genes use (ranked loading) bottomNGenes number bottom genes use (ranked loading) reduction reduction use","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/FilterDisallowedClasses.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Disallowed Classes — FilterDisallowedClasses","title":"Filter Disallowed Classes — FilterDisallowedClasses","text":"used flag cells high UCell score combinations generally indiciative contamination doublets","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/FilterDisallowedClasses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Disallowed Classes — FilterDisallowedClasses","text":"","code":"FilterDisallowedClasses(   seuratObj,   sourceField = \"RIRA_Immune_v2.majority_voting\",   outputFieldName = \"DisallowedUCellCombinations\",   ucellCutoff = 0.2,   disallowedClasses = list(T_NK = c(\"Bcell.RM_UCell\", \"Myeloid.RM_UCell\",     \"Erythrocyte.RM_UCell\", \"Platelet.RM_UCell\", \"NeutrophilLineage.RM_UCell\"), Myeloid =     c(\"Bcell.RM_UCell\", \"Tcell.RM_UCell\", \"NK.RM_UCell\", \"Erythrocyte.RM_UCell\",     \"Platelet.RM_UCell\"), Bcell = c(\"Tcell.RM_UCell\", \"NK.RM_UCell\", \"Myeloid.RM_UCell\",     \"Erythrocyte.RM_UCell\", \"Platelet.RM_UCell\", \"NeutrophilLineage.RM_UCell\",     \"Complement.RM_UCell\")) )"},{"path":"https://bimberlab.github.io/RIRA/reference/FilterDisallowedClasses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Disallowed Classes — FilterDisallowedClasses","text":"seuratObj seurat object sourceField name field compare outputFieldName name field store results ucellCutoff cells expressing disallowed UCell value flagged disallowedClasses list names cell classes (match levels sourceField), values vector UCell field names.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/GetAvailableScGates.html","id":null,"dir":"Reference","previous_headings":"","what":"GetAvailableScGates — GetAvailableScGates","title":"GetAvailableScGates — GetAvailableScGates","text":"Return list available scGate models","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/GetAvailableScGates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetAvailableScGates — GetAvailableScGates","text":"","code":"GetAvailableScGates()"},{"path":"https://bimberlab.github.io/RIRA/reference/GetGeneSet.html","id":null,"dir":"Reference","previous_headings":"","what":"GetGeneSet — GetGeneSet","title":"GetGeneSet — GetGeneSet","text":"Returns vector set genes registered provided name.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/GetGeneSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetGeneSet — GetGeneSet","text":"","code":"GetGeneSet(name)"},{"path":"https://bimberlab.github.io/RIRA/reference/GetGeneSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetGeneSet — GetGeneSet","text":"name name gene set","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/GetMMul10IgGenes.html","id":null,"dir":"Reference","previous_headings":"","what":"GetMMul10IgGenes — GetMMul10IgGenes","title":"GetMMul10IgGenes — GetMMul10IgGenes","text":"Returns vector MMul10 gene IDs (NCBI build) TCR genes.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/GetMMul10IgGenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetMMul10IgGenes — GetMMul10IgGenes","text":"","code":"GetMMul10IgGenes()"},{"path":"https://bimberlab.github.io/RIRA/reference/GetMMul10TcrGenes.html","id":null,"dir":"Reference","previous_headings":"","what":"GetMMul10TcrGenes — GetMMul10TcrGenes","title":"GetMMul10TcrGenes — GetMMul10TcrGenes","text":"Returns vector MMul10 gene IDs (NCBI build) TCR genes.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/GetMMul10TcrGenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetMMul10TcrGenes — GetMMul10TcrGenes","text":"","code":"GetMMul10TcrGenes(includeConstantRegion = FALSE)"},{"path":"https://bimberlab.github.io/RIRA/reference/GetMMul10TcrGenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetMMul10TcrGenes — GetMMul10TcrGenes","text":"includeConstantRegion true, MMul10TcrConstantRegion GeneSet included.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/GetScGateModel.html","id":null,"dir":"Reference","previous_headings":"","what":"GetScGateModel — GetScGateModel","title":"GetScGateModel — GetScGateModel","text":"Returns selected scGate model","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/GetScGateModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetScGateModel — GetScGateModel","text":"","code":"GetScGateModel(modelName, allowSCGateDB = TRUE)"},{"path":"https://bimberlab.github.io/RIRA/reference/GetScGateModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetScGateModel — GetScGateModel","text":"modelName name gate return. See GetAvailableScGates() list known gates allowSCGateDB true, search local models models provided scGate::get_scGateDB()","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/GetSeed.html","id":null,"dir":"Reference","previous_headings":"","what":"Get random seed — GetSeed","title":"Get random seed — GetSeed","text":"Sets random seed, used internal functions","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/GetSeed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get random seed — GetSeed","text":"","code":"GetSeed()"},{"path":"https://bimberlab.github.io/RIRA/reference/InterpretModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Interprets the feature importance of each model — InterpretModels","title":"Interprets the feature importance of each model — InterpretModels","text":"Interprets feature importance model using DALEX feature importance permuation","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/InterpretModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interprets the feature importance of each model — InterpretModels","text":"","code":"InterpretModels(output_dir = \"./classifiers\", plot_type = \"ratio\")"},{"path":"https://bimberlab.github.io/RIRA/reference/InterpretModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interprets the feature importance of each model — InterpretModels","text":"output_dir output directory TrainAllModels saved training data models plot_type Argument pass model_parts(). Ratio difference recommended large feature sets base model's AUC loss outside plotting range.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/ListGeneSets.html","id":null,"dir":"Reference","previous_headings":"","what":"ListGeneSets — ListGeneSets","title":"ListGeneSets — ListGeneSets","text":"Prints list gene sets registered package","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/ListGeneSets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ListGeneSets — ListGeneSets","text":"","code":"ListGeneSets()"},{"path":"https://bimberlab.github.io/RIRA/reference/MakePhenotypingDotPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"MakePhenotypingDotPlot — MakePhenotypingDotPlot","title":"MakePhenotypingDotPlot — MakePhenotypingDotPlot","text":"Creates DotPlot using custom gene sets attempts coarsely group gene sets cell type.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/MakePhenotypingDotPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MakePhenotypingDotPlot — MakePhenotypingDotPlot","text":"","code":"MakePhenotypingDotPlot(   seuratObj,   yField = \"ClusterNames_0.2\",   scaled = T,   gene_lists = c(\"Cytotoxicity\", \"EffectorCytokines\"),   assay = \"RNA\",   scale.by = \"size\" )"},{"path":"https://bimberlab.github.io/RIRA/reference/MakePhenotypingDotPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MakePhenotypingDotPlot — MakePhenotypingDotPlot","text":"seuratObj Seurat Object storing count matrix used phenotyping. yField grouping variable used calculate average expression genes y axis DotPlot. scaled boolean defining whether color dots scaled expression unscaled expression. gene_lists vector gene lists (defined .RegisterGeneSet) queried genes plotted. assay assay use input seuratObj scale.Allow different scaling methods dot size. 'radius' de-emphasize lower/intermediately percent expressed genes.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/PlotImmuneMarkers.html","id":null,"dir":"Reference","previous_headings":"","what":"PlotImmuneMarkers — PlotImmuneMarkers","title":"PlotImmuneMarkers — PlotImmuneMarkers","text":"Generate set Seurat FeaturePlots common immune cell markers","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/PlotImmuneMarkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlotImmuneMarkers — PlotImmuneMarkers","text":"","code":"PlotImmuneMarkers(seuratObj, reductions = c(\"tsne\", \"umap\"))"},{"path":"https://bimberlab.github.io/RIRA/reference/PlotImmuneMarkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlotImmuneMarkers — PlotImmuneMarkers","text":"seuratObj seurat object reductions Vector reduction(s) use","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/PlotMarkerSeries.html","id":null,"dir":"Reference","previous_headings":"","what":"PlotMarkerSeries — PlotMarkerSeries","title":"PlotMarkerSeries — PlotMarkerSeries","text":"Iteratively plots set markers","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/PlotMarkerSeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlotMarkerSeries — PlotMarkerSeries","text":"","code":"PlotMarkerSeries(   seuratObj,   features,   reductions = c(\"umap\"),   title = NULL,   setSize = 4 )"},{"path":"https://bimberlab.github.io/RIRA/reference/PlotMarkerSeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlotMarkerSeries — PlotMarkerSeries","text":"seuratObj seurat object features vector feature names reductions reductions plot title optional title plot series setSize maximum number features include per FeaturePlot","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/PlotUcellCorrelation.html","id":null,"dir":"Reference","previous_headings":"","what":"PlotUcellCorrelation — PlotUcellCorrelation","title":"PlotUcellCorrelation — PlotUcellCorrelation","text":"plot correlation UCell score gene set interest","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/PlotUcellCorrelation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlotUcellCorrelation — PlotUcellCorrelation","text":"","code":"PlotUcellCorrelation(seuratObj, toCalculate, assayName = \"RNA\")"},{"path":"https://bimberlab.github.io/RIRA/reference/PlotUcellCorrelation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlotUcellCorrelation — PlotUcellCorrelation","text":"seuratObj seurat object toCalculate named list item character vector genes assayName assay use","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/PlotUcellCorrelation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PlotUcellCorrelation — PlotUcellCorrelation","text":"list moduleName spearman correlation matrix","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/PredictCellTypeProbability.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies trained models to get celltype probabilities — PredictCellTypeProbability","title":"Applies trained models to get celltype probabilities — PredictCellTypeProbability","text":"Applies trained models get celltype probabilities.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/PredictCellTypeProbability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies trained models to get celltype probabilities — PredictCellTypeProbability","text":"","code":"PredictCellTypeProbability(   seuratObj,   models,   fieldName = \"RIRA_Consensus\",   batchSize = 20000,   assayName = \"RNA\",   minimum_probability = 0.5,   minimum_delta = 0.25 )"},{"path":"https://bimberlab.github.io/RIRA/reference/PredictCellTypeProbability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies trained models to get celltype probabilities — PredictCellTypeProbability","text":"seuratObj Seurat Object updated models named vector models, values modelName (built-model), filePath RDS file. names vector cell-type label cells scored positive classifier. fieldName name metadata column store result batchSize conserve memory, data chunked batches many cells assayName assay holding gene expression data minimum_probability minimum probability confident cell type assignment minimum_delta minimum difference probabilities necessary call one celltype another.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/RunCellTypist.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Celltypist — RunCellTypist","title":"Run Celltypist — RunCellTypist","text":"Runs celltypist seurat object stores calls metadata","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/RunCellTypist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Celltypist — RunCellTypist","text":"","code":"RunCellTypist(   seuratObj,   modelName = \"Immune_All_Low.pkl\",   pThreshold = 0.5,   minProp = 0,   useMajorityVoting = TRUE,   mode = \"prob_match\",   extraArgs = c(\"--mode\", mode, \"--p-thres\", pThreshold, \"--min-prop\", minProp),   assayName = Seurat::DefaultAssay(seuratObj),   columnPrefix = NULL,   maxAllowableClasses = 6,   minFractionToInclude = 0.01,   minCellsToRun = 200,   maxBatchSize = 1e+05,   retainProbabilityMatrix = FALSE,   runCelltypistUpdate = TRUE )"},{"path":"https://bimberlab.github.io/RIRA/reference/RunCellTypist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Celltypist — RunCellTypist","text":"seuratObj seurat object modelName model name path celltypist model pThreshold default, passed –p-thres argument. However, also provide extraArgs, ignored. minProp default, passed –min-prop argument. However, also provide extraArgs, ignored. useMajorityVoting true, celltypist –majority-voting option added. mode Passed directly celltypist –mode argument. Either best_match prob_match extraArgs optional list additional arguments passed directly command line cell typist assayName name assay use. Others dropped columnPrefix prefix added beginning resulting columns, added seurat@meta.data maxAllowableClasses Celltypist can assign cell many classes, creating extremely long labels. cell number labels set NA minFractionToInclude non-null, labels fewer fraction cells set NA. minCellsToRun input seurat object fewer many cells, NAs added expected columns celltypist run. maxBatchSize many cells object, split batches size run serial. retainProbabilityMatrix true, celltypist probability_matrix per-class probabilities stored meta.data runCelltypistUpdate true, –update-models run celltypist prior scoring cells.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/RunScGate.html","id":null,"dir":"Reference","previous_headings":"","what":"Run scGate — RunScGate","title":"Run scGate — RunScGate","text":"Helper function run scGate","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/RunScGate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run scGate — RunScGate","text":"","code":"RunScGate(   seuratObj,   model,   min.cells = 30,   assay = \"RNA\",   pos.thr = 0.13,   neg.thr = 0.13,   ncores = 1,   output.col.name = \"is.pure\",   genes.blacklist = \"default\",   doPlotUCellScores = TRUE )"},{"path":"https://bimberlab.github.io/RIRA/reference/RunScGate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run scGate — RunScGate","text":"seuratObj seurat object model Either scGate model, character passed GetScGateModel() min.cells Passed directly scGate::scGate. Stop iterating fewer number cells left assay Passed directly scGate::scGate. Seurat assay use pos.thr Passed directly scGate::scGate. Minimum UCell score value positive signatures neg.thr Passed directly scGate::scGate. Maximum UCell score value negative signatures ncores Passed directly scGate::scGate. Number processors parallel processing (requires future.apply) output.col.name Passed directly scGate::scGate. Column name 'pure/impure' annotation genes.blacklist Passed directly scGate::scGate. Genes blacklisted variable features. default loads list genes scGate::genes.blacklist.default; may deactivate blacklisting setting genes.blacklist=NULL doPlotUCellScores true, FeaturePlots created UCell score used classification","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/RunScGateForModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Run scGate for models — RunScGateForModels","title":"Run scGate for models — RunScGateForModels","text":"Helper function run scGate, iterating provided models generating consensus field","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/RunScGateForModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run scGate for models — RunScGateForModels","text":"","code":"RunScGateForModels(   seuratObj,   modelNames,   min.cells = 30,   assay = \"RNA\",   pos.thr = 0.13,   neg.thr = 0.13,   ncores = 1,   genes.blacklist = \"default\",   labelRename = NULL,   dropAmbiguousConsensusValues = FALSE,   consensusModels = NULL )"},{"path":"https://bimberlab.github.io/RIRA/reference/RunScGateForModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run scGate for models — RunScGateForModels","text":"seuratObj seurat object modelNames vector model names run. assumed non-overlapping populations min.cells Passed directly scGate::scGate. Stop iterating fewer number cells left assay Passed directly scGate::scGate. Seurat assay use pos.thr Passed directly scGate::scGate. Minimum UCell score value positive signatures neg.thr Passed directly scGate::scGate. Maximum UCell score value negative signatures ncores Passed directly scGate::scGate. Number processors parallel processing (requires future.apply) genes.blacklist Passed directly scGate::scGate. Genes blacklisted variable features. default loads list genes scGate::genes.blacklist.default; may deactivate blacklisting setting genes.blacklist=NULL labelRename optional list maps model name final label used seurat object. exmaple: list(Tcell = 'T_NK', NK = 'T_NK'), re-label cells classified either 'Tcell' 'NK' models one common label T_NK dropAmbiguousConsensusValues true, consensus calls ambiguous set NA consensusModels optional list model names consider consensus call. allows many models run, yet consider subset creating consensus call. might useful models overlap produce false-positives.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/RunScGateWithDefaultModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Run scGate With DefaultModels — RunScGateWithDefaultModels","title":"Run scGate With DefaultModels — RunScGateWithDefaultModels","text":"Helper function run scGate, running human models scGate::get_sc()","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/RunScGateWithDefaultModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run scGate With DefaultModels — RunScGateWithDefaultModels","text":"","code":"RunScGateWithDefaultModels(   seuratObj,   min.cells = 30,   assay = \"RNA\",   pos.thr = 0.13,   neg.thr = 0.13,   ncores = 1,   genes.blacklist = \"default\",   labelRename = NULL,   dropAmbiguousConsensusValues = FALSE,   excludedModels = c(\"Male\", \"Female\") )"},{"path":"https://bimberlab.github.io/RIRA/reference/RunScGateWithDefaultModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run scGate With DefaultModels — RunScGateWithDefaultModels","text":"seuratObj seurat object min.cells Passed directly scGate::scGate. Stop iterating fewer number cells left assay Passed directly scGate::scGate. Seurat assay use pos.thr Passed directly scGate::scGate. Minimum UCell score value positive signatures neg.thr Passed directly scGate::scGate. Maximum UCell score value negative signatures ncores Passed directly scGate::scGate. Number processors parallel processing (requires future.apply) genes.blacklist Passed directly scGate::scGate. Genes blacklisted variable features. default loads list genes scGate::genes.blacklist.default; may deactivate blacklisting setting genes.blacklist=NULL labelRename optional list maps model name final label used seurat object. exmaple: list(Tcell = 'T_NK', NK = 'T_NK'), re-label cells classified either 'Tcell' 'NK' models one common label T_NK dropAmbiguousConsensusValues true, consensus calls ambiguous set NA excludedModels optional vector model names exclude","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/RunScGateWithRhesusModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Run scGate using Rhesus macaque models — RunScGateWithRhesusModels","title":"Run scGate using Rhesus macaque models — RunScGateWithRhesusModels","text":"Helper function run scGate, iterating provided models generating consensus field","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/RunScGateWithRhesusModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run scGate using Rhesus macaque models — RunScGateWithRhesusModels","text":"","code":"RunScGateWithRhesusModels(   seuratObj,   min.cells = 30,   assay = \"RNA\",   pos.thr = 0.13,   neg.thr = 0.13,   ncores = 1,   genes.blacklist = \"default\",   dropAmbiguousConsensusValues = FALSE )"},{"path":"https://bimberlab.github.io/RIRA/reference/RunScGateWithRhesusModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run scGate using Rhesus macaque models — RunScGateWithRhesusModels","text":"seuratObj seurat object min.cells Passed directly scGate::scGate. Stop iterating fewer number cells left assay Passed directly scGate::scGate. Seurat assay use pos.thr Passed directly scGate::scGate. Minimum UCell score value positive signatures neg.thr Passed directly scGate::scGate. Maximum UCell score value negative signatures ncores Passed directly scGate::scGate. Number processors parallel processing (requires future.apply) genes.blacklist Passed directly scGate::scGate. Genes blacklisted variable features. default loads list genes scGate::genes.blacklist.default; may deactivate blacklisting setting genes.blacklist=NULL dropAmbiguousConsensusValues true, consensus calls ambiguous set NA","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/ScoreCellsWithSavedModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies a trained binary classifier to get per-cell probabilities. — ScoreCellsWithSavedModel","title":"Applies a trained binary classifier to get per-cell probabilities. — ScoreCellsWithSavedModel","text":"Applies trained model get per-cell probabilities.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/ScoreCellsWithSavedModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies a trained binary classifier to get per-cell probabilities. — ScoreCellsWithSavedModel","text":"","code":"ScoreCellsWithSavedModel(   seuratObj,   model,   fieldToClass,   batchSize = 20000,   assayName = \"RNA\" )"},{"path":"https://bimberlab.github.io/RIRA/reference/ScoreCellsWithSavedModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies a trained binary classifier to get per-cell probabilities. — ScoreCellsWithSavedModel","text":"seuratObj Seurat Object updated model Either full filepath model RDS file, name built-model. fieldToClass list mapping target field name seurat object classifier level. latter either numeric, string label. example: list('CD4_T' = 1, 'CD8_T' = 2)) batchSize conserve memory, data chunked batches many cells assayName assay holding gene expression data","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/ScoreUsingSavedComponent.html","id":null,"dir":"Reference","previous_headings":"","what":"ScoreUsingSavedComponent — ScoreUsingSavedComponent","title":"ScoreUsingSavedComponent — ScoreUsingSavedComponent","text":"Scores seurat object using gene weights saved component","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/ScoreUsingSavedComponent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ScoreUsingSavedComponent — ScoreUsingSavedComponent","text":"","code":"ScoreUsingSavedComponent(   seuratObj,   componentOrName,   fieldName,   assayName = \"RNA\" )"},{"path":"https://bimberlab.github.io/RIRA/reference/ScoreUsingSavedComponent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ScoreUsingSavedComponent — ScoreUsingSavedComponent","text":"seuratObj seurat object componentOrName Either data frame columns 'feature' 'weight', name previously saved component available RIRA fieldName name field save resulting scores assayName assay use","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/SetSeed.html","id":null,"dir":"Reference","previous_headings":"","what":"Set random seed — SetSeed","title":"Set random seed — SetSeed","text":"Sets seed used R‘s random number generator, used internal functions","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/SetSeed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set random seed — SetSeed","text":"","code":"SetSeed(seed)"},{"path":"https://bimberlab.github.io/RIRA/reference/SetSeed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set random seed — SetSeed","text":"seed random seed","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/TrainCellTypist.html","id":null,"dir":"Reference","previous_headings":"","what":"Train Celltypist — TrainCellTypist","title":"Train Celltypist — TrainCellTypist","text":"Train celltypist using data seurat object saves resulting model","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/TrainCellTypist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train Celltypist — TrainCellTypist","text":"","code":"TrainCellTypist(   seuratObj,   labelField,   modelFile,   minCellsPerClass = 20,   assayName = Seurat::DefaultAssay(seuratObj),   tempFileLocation = NULL,   dropAmbiguousLabelValues = TRUE,   excludedClasses = NULL,   featureInclusionList = NULL,   featureExclusionList = NULL )"},{"path":"https://bimberlab.github.io/RIRA/reference/TrainCellTypist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train Celltypist — TrainCellTypist","text":"seuratObj seurat object labelField field seuratObj@meta.data holding labels training modelFile path save model minCellsPerClass provided, classes (corresponding cells) fewer many cells dropped training data assayName name assay use tempFileLocation location temporary files (like annData version seurat object), written. dropAmbiguousLabelValues true, label value comma dropped. excludedClasses vector labels discard. featureInclusionList provided, input count matrix subset just features. used, Seurat::NormalizeData re-run. featureExclusionList provided, input count matrix subset remove features. used, Seurat::NormalizeData re-run.","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/TrainModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a binary classifier to classify cells within a Seurat object — TrainModel","title":"Creates a binary classifier to classify cells within a Seurat object — TrainModel","text":"Creates binary classifier classify cells","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/TrainModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a binary classifier to classify cells within a Seurat object — TrainModel","text":"","code":"TrainModel(   training_matrix,   celltype,   hyperparameter_tuning = F,   learner = \"classif.ranger\",   inner_resampling = \"cv\",   outer_resampling = \"cv\",   inner_folds = 4,   inner_ratio = 0.8,   outer_folds = 3,   outer_ratio = 0.8,   n_models = 20,   n_cores = NULL )"},{"path":"https://bimberlab.github.io/RIRA/reference/TrainModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a binary classifier to classify cells within a Seurat object — TrainModel","text":"training_matrix counts data slot provided TrainModelsFromSeurat celltype celltype (provided TrainModelsFromSeurat) used classifier's positive prediction hyperparameter_tuning logical determines whether hyperparameter tuning performed. learner mlr3 learner used. Currently fixed \"classif.ranger\" hyperparameter tuning FALSE. Otherwise, \"classif.xgboost\" \"classif.ranger\" supported. inner_resampling resampling strategy used hyperparameter optimization. Holdout (\"hout\" \"holdout\") cross validation (\"cv\" \"cross-validation\") supported. outer_resampling resampling strategy used determine overfitting. Holdout (\"hout\" \"holdout\") cross validation (\"cv\" \"cross-validation\") supported. inner_folds number folds used inner_resampling cross-valdiation performed. inner_ratio ratio training testing data used inner_resampling holdout resampling performed. outer_folds number folds used outer_resampling cross-valdiation performed. outer_ratio ratio training testing data used inner_resampling holdout resampling performed. n_models number models trained hyperparameter tuning. model highest accuracy selected returned. n_cores non-null, number workers used future::plan","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/TrainModelsFromSeurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function for TrainModel to train a suite of binary classifiers for each cell type present in the data — TrainModelsFromSeurat","title":"Wrapper function for TrainModel to train a suite of binary classifiers for each cell type present in the data — TrainModelsFromSeurat","text":"Wrapper function TrainModel train suite binary classifiers cell type present data","code":""},{"path":"https://bimberlab.github.io/RIRA/reference/TrainModelsFromSeurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function for TrainModel to train a suite of binary classifiers for each cell type present in the data — TrainModelsFromSeurat","text":"","code":"TrainModelsFromSeurat(   seuratObj,   celltype_column,   assay = \"RNA\",   slot = \"data\",   output_dir = \"./classifiers\",   hyperparameter_tuning = F,   learner = \"classif.ranger\",   inner_resampling = \"cv\",   outer_resampling = \"cv\",   inner_folds = 4,   inner_ratio = 0.8,   outer_folds = 3,   outer_ratio = 0.8,   n_models = 20,   n_cores = NULL,   gene_list = NULL,   gene_exclusion_list = NULL,   verbose = TRUE,   min_cells_per_class = 20 )"},{"path":"https://bimberlab.github.io/RIRA/reference/TrainModelsFromSeurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function for TrainModel to train a suite of binary classifiers for each cell type present in the data — TrainModelsFromSeurat","text":"seuratObj Seurat Object updated celltype_column metadata column containing celltypes. One classifier created celltype present column. assay SeuratObj assay containing desired count matrix/metadata slot Slot containing count data. restricted counts, data, scale.data. output_dir directory models, metrics, training data saved. hyperparameter_tuning Logical determines whether hyperparameter tuning performed. learner mlr3 learner used. Currently fixed \"classif.ranger\" hyperparameter tuning FALSE. Otherwise, \"classif.xgboost\" \"classif.ranger\" supported. inner_resampling resampling strategy used hyperparameter optimization. Holdout (\"hout\" \"holdout\") cross validation (\"cv\" \"cross-validation\") supported. outer_resampling resampling strategy used determine overfitting. Holdout (\"hout\" \"holdout\") cross validation (\"cv\" \"cross-validation\") supported. inner_folds number folds used inner_resampling cross-valdiation performed. inner_ratio ratio training testing data used inner_resampling holdout resampling performed. outer_folds number folds used outer_resampling cross-valdiation performed. outer_ratio ratio training testing data used inner_resampling holdout resampling performed. n_models number models trained hyperparameter tuning. model highest accuracy selected returned. n_cores non-null, number workers used future::plan gene_list non-null, input count matrix subset features gene_exclusion_list non-null, input count matrix subset drop features verbose Whether print metrics data model training. min_cells_per_class provided, classes (corresponding cells) fewer many cells dropped training data","code":""}]
